from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç
USER_LANGUAGE = {}
USER_MESSAGE_ID = {}

TOKEN = '7870153726:AAHNAJWQpMhk2UXe1iXwWBiNC59ojAMnbO8'  # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ BotFather ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶ì

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    USER_LANGUAGE[user_id] = 'en'  # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø

    welcome_text = f"üëãüèª **Hello {username}!**\n\nWelcome to Developer Swygen Help Bot.\nPlease select your language to continue:"  
    keyboard = [  
        [InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data='set_lang_bn')],  
        [InlineKeyboardButton("üá¨üáß English", callback_data='set_lang_en')],  
    ]  
    sent_message = await update.message.reply_text(  
        welcome_text,  
        reply_markup=InlineKeyboardMarkup(keyboard),  
        parse_mode='Markdown'  
    )  
    USER_MESSAGE_ID[user_id] = sent_message.message_id

# ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'set_lang_bn':  
        USER_LANGUAGE[user_id] = 'bn'  
    else:  
        USER_LANGUAGE[user_id] = 'en'  

    await send_main_menu(update, context, edit=True)

# ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=False):
    user_id = update.effective_user.id
    lang = USER_LANGUAGE.get(user_id, 'en')

    text = "üè° **Main Menu**\n\nChoose what you want to explore:" if lang == 'en' else "üè° **‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ**\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®?"  

    keyboard = [  
        [InlineKeyboardButton("üë§ About Me", callback_data='about')],  
        [InlineKeyboardButton("üõ†Ô∏è Skills", callback_data='skills')],  
        [InlineKeyboardButton("üåê Website", callback_data='website')],  
        [InlineKeyboardButton("üìû Contact", callback_data='contact')],  
        [InlineKeyboardButton("üóÇÔ∏è Projects", callback_data='projects')],  
        [InlineKeyboardButton("üìú Privacy Policy", callback_data='privacy')],  
        [InlineKeyboardButton("üë®‚Äçüíª Developer", callback_data='developer')],  
        [InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data='set_lang_bn'),  
         InlineKeyboardButton("üá¨üáß English", callback_data='set_lang_en')],  
    ]  

    if edit:  
        await context.bot.edit_message_text(  
            chat_id=user_id,  
            message_id=USER_MESSAGE_ID[user_id],  
            text=text,  
            reply_markup=InlineKeyboardMarkup(keyboard),  
            parse_mode='Markdown'  
        )  
    else:  
        sent_message = await context.bot.send_message(  
            chat_id=user_id,  
            text=text,  
            reply_markup=InlineKeyboardMarkup(keyboard),  
            parse_mode='Markdown'  
        )  
        USER_MESSAGE_ID[user_id] = sent_message.message_id

# ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = USER_LANGUAGE.get(user_id, 'en')

    back_button = InlineKeyboardButton("üîô Back", callback_data='back_to_menu')  

    if query.data == 'about':  
        text = "üë§ **About Me**\n\nHi, I'm Ayman Hasan Shaan, passionate about Web Development and Automation." if lang == 'en' else "üë§ **‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá**\n\n‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡ßü‡¶Æ‡¶æ‡¶® ‡¶π‡¶æ‡¶∏‡¶æ‡¶® ‡¶∂‡¶æ‡¶®, ‡¶ì‡ßü‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶∂‡¶® ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø‡•§"  

    elif query.data == 'skills':  
        text = "üõ†Ô∏è **Skills**\n\n- Python\n- HTML, CSS, JS\n- Telegram Bots\n- Automation Scripts\n- PHP\n- Node.js\n- React" if lang == 'en' else "üõ†Ô∏è **‡¶∏‡ßç‡¶ï‡¶ø‡¶≤‡¶∏**\n\n- ‡¶™‡¶æ‡¶á‡¶•‡¶®\n- ‡¶è‡¶á‡¶ö‡¶ü‡¶ø‡¶è‡¶Æ‡¶è‡¶≤, ‡¶∏‡¶ø‡¶è‡¶∏‡¶è‡¶∏, ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü\n- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡¶∏\n- ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡¶∏\n- ‡¶™‡¶ø‡¶è‡¶á‡¶ö‡¶™‡¶ø\n- ‡¶®‡ßã‡¶°.‡¶ú‡ßá‡¶è‡¶∏\n- ‡¶∞‡¶ø‡ßü‡ßá‡¶ï‡ßç‡¶ü"  

    elif query.data == 'website':  
        text = "üåê Visit my website: [Click Here](https://swygen.netlify.app/)"  

    elif query.data == 'contact':  
        text = "üìû **Contact Info**\n\n- Email: swygenofficial@gmail.com\n- Telegram: @Swygen_bd" if lang == 'en' else "üìû **‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø**\n\n- ‡¶á‡¶Æ‡ßá‡¶á‡¶≤: swygenofficial@gmail.com\n- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ: @Swygen_bd"  

    elif query.data == 'privacy':  
        text = "üìú [Read our Privacy Policy](https://swygen.netlify.app/police)"  

    elif query.data == 'developer':  
        text = "üë®‚Äçüíª **Developer**\n\nBot developed by Swygen Official."  

    elif query.data == 'projects':  
        await send_projects_menu(update, context)  
        return  

    elif query.data == 'back_to_menu':  
        await send_main_menu(update, context, edit=True)  
        return  

    elif query.data.startswith('project_'):  
        await send_project_details(update, context)  
        return  

    await context.bot.edit_message_text(  
        chat_id=user_id,  
        message_id=USER_MESSAGE_ID[user_id],  
        text=text,  
        reply_markup=InlineKeyboardMarkup([back_button]),  
        parse_mode='Markdown'  
    )

# ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def send_projects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    keyboard = [  
        [InlineKeyboardButton("üåê Website Developer", callback_data='project_website')],  
        [InlineKeyboardButton("üì± App Developer", callback_data='project_app')],  
        [InlineKeyboardButton("üé® UI/UX Designer", callback_data='project_uiux')],  
        [InlineKeyboardButton("ü§ñ Chat Bot Developer", callback_data='project_chatbot')],  
        [InlineKeyboardButton("‚òéÔ∏è Customer Support", callback_data='project_support')],  
        [InlineKeyboardButton("üë®‚Äçüíª Programming", callback_data='project_programming')],  
        [InlineKeyboardButton("üîô Back", callback_data='back_to_menu')],  
    ]  

    text = "üóÇÔ∏è **My Projects**\n\nChoose a project to explore:"  

    await context.bot.edit_message_text(  
        chat_id=user_id,  
        message_id=USER_MESSAGE_ID[user_id],  
        text=text,  
        reply_markup=InlineKeyboardMarkup(keyboard),  
        parse_mode='Markdown'  
    )

# ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def send_project_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    project_photos = {  
        'project_website': ("üåê **Website Development**", "https://assets.onecompiler.app/43ea4pg72/43fr339cx/web-development-flat-landing-page-creative-team-designers-developers-work-together-illustration-full-stack-development-software-engineering-web-page-composition-with-people-characters_9209-3545.webp"),  
        'project_app': ("üì± **App Development**", "https://i.postimg.cc/JnRTm9fF/app-development-banner-33099-1720.webp"),  
        'project_uiux': ("üé® **UI/UX Design**", "https://i.postimg.cc/QCySQVFL/realistic-ui-ux-background-23-2149046824.webp"),  
        'project_chatbot': ("ü§ñ **Chat Bot**", "https://i.postimg.cc/YSHRf5CS/chat-bot-concept-illustration-114360-5223.webp"),  
        'project_support': ("‚òéÔ∏è **Customer Support**", "https://i.postimg.cc/sxv4gywT/organic-flat-design-customer-support-23-2148887076.webp"),  
        'project_programming': ("üë®‚Äçüíª **Programming**", "https://i.postimg.cc/VvpBSThm/flat-composition-with-programmer-testing-programs-illustration-1284-55908.webp"),  
    }  

    title, photo_url = project_photos.get(query.data, ("Project", ""))  

    back_button = InlineKeyboardButton("üîô Back", callback_data='projects')  

    await context.bot.send_photo(  
        chat_id=user_id,  
        photo=photo_url,  
        caption=title,  
        reply_markup=InlineKeyboardMarkup([back_button]),  
        parse_mode='Markdown'  
    )

# /help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Use /start to restart the bot.")

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶è‡¶™ ‡¶∞‡ßÅ‡¶® ‡¶ï‡¶∞‡¶æ
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))  
    app.add_handler(CommandHandler('help', help_command))  
    app.add_handler(CallbackQueryHandler(language_selected, pattern='^set_lang_'))  
    app.add_handler(CallbackQueryHandler(button_handler))  

    app.run_polling()
