from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en'),
         InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data='lang_bn')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(
        photo="https://i.postimg.cc/7PQgNm10/20250427-172406.jpg",  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Banner ‡¶õ‡¶¨‡¶ø
        caption="‚ú® **Welcome to Developer SwygeN Bot!**\n\nSelect your language to start:",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

# Language selection
async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang = query.data
    if lang == "lang_en":
        context.user_data['lang'] = "en"
        await show_menu_en(query)
    elif lang == "lang_bn":
        context.user_data['lang'] = "bn"
        await show_menu_bn(query)

# Main Menu EN
async def show_menu_en(query):
    keyboard = [
        [InlineKeyboardButton("üë§ Profile", callback_data='profile_en')],
        [InlineKeyboardButton("üíº Projects", callback_data='projects_en')],
        [InlineKeyboardButton("‚úâÔ∏è Contact", callback_data='contact_en')],
        [InlineKeyboardButton("üåê Website", url="https://example.com")],
        [InlineKeyboardButton("üîí Privacy Policy", url="https://example.com/privacy")],
        [InlineKeyboardButton("‚ö° Powered by Swygen", url="https://t.me/swygenofficial")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="‚ú® **Main Menu \ÓÄÅEnglish\ÓÄÅ**\n\nPlease choose an option below:",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

# Main Menu BN
async def show_menu_bn(query):
    keyboard = [
        [InlineKeyboardButton("üë§ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤", callback_data='profile_bn')],
        [InlineKeyboardButton("üíº ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶∏‡¶Æ‡ßÇ‡¶π", callback_data='projects_bn')],
        [InlineKeyboardButton("‚úâÔ∏è ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó", callback_data='contact_bn')],
        [InlineKeyboardButton("üåê ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü", url="https://example.com")],
        [InlineKeyboardButton("üîí ‡¶ó‡ßã‡¶™‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ ‡¶®‡ßÄ‡¶§‡¶ø", url="https://example.com/privacy")],
        [InlineKeyboardButton("‚ö° Powered by Swygen", url="https://t.me/swygenofficial")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="‚ú® **‡¶Æ‡ßá‡¶á‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ \ÓÄÅ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ\ÓÄÅ**\n\n‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

# Profile EN
async def profile_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardButton("üîô Back", callback_data='lang_en')
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_media(
        media=InputMediaPhoto(
            media="https://assets.onecompiler.app/43ea4pg72/43ejdw4bt/Grey%20Yellow%20Minimalist%20Software%20Development%20Logo.png",  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ Photo
            caption="üë§ **About Me**\n\n"
                    "‚Ä¢ Name: **Ayman Hasan Shaan**\n"
                    "‚Ä¢ Skills: Python \\| Telegram Bots \\| Web Developer\n"
                    "‚Ä¢ Experience: 3+ Years\n\n"
                    "‚ö° **Bringing ideas into reality\\!**\n\n"
                    "üåê **Social Links**:\n"
                    "‚Ä¢ Instagram: [@swygenofficial](https://instagram.com/swygenofficial)\n"
                    "‚Ä¢ GitHub: [Swygen GitHub](https://github.com/swygen-bd-dev)\n"
                    "‚Ä¢ WhatsApp: [Chat with me](https://wa.me/message/BQ77IMY2MHW6E1)\n"
                    "‚Ä¢ Facebook: [My Facebook](https://facebook.com/ayman.hasan.shaan)\n",
            parse_mode='MarkdownV2'
        ),
        reply_markup=reply_markup
    )

# Profile BN
async def profile_bn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data='lang_bn')
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_media(
        media=InputMediaPhoto(
            media="https://telegra.ph/file/8c7c3c5a9b27ea915d1b1.jpg",
            caption="üë§ **‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá**\n\n"
                    "‚Ä¢ ‡¶®‡¶æ‡¶Æ: **‡¶Ü‡¶Ø‡¶º‡¶Æ‡¶æ‡¶® ‡¶π‡¶æ‡¶∏‡¶æ‡¶® ‡¶∂‡¶æ‡¶®**\n"
                    "‚Ä¢ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ: ‡¶™‡¶æ‡¶á‡¶•‡¶® \\| ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü \\| ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞\n"
                    "‚Ä¢ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ: ‡ß©+ ‡¶¨‡¶õ‡¶∞\n\n"
                    "‚ö° **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡ßá ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡ßá ‡¶∞‡ßÇ‡¶™ ‡¶¶‡¶ø‡¶á\\!**\n\n"
                    "üåê **‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï**:\n"
                    "‚Ä¢ Instagram: [@swygenofficial](https://instagram.com/swygenofficial)\n"
                    "‚Ä¢ GitHub: [Swygen GitHub](https://github.com/swygen-bd-dev)\n"
                    "‚Ä¢ WhatsApp: [‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®](https://wa.me/message/BQ77IMY2MHW6E1)\n"
                    "‚Ä¢ Facebook: [‡¶Ü‡¶Æ‡¶æ‡¶∞ Facebook](https://facebook.com/ayman.hasan.shaan)\n",
            parse_mode='MarkdownV2'
        ),
        reply_markup=reply_markup
    )

# Projects EN
async def projects_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardButton("üîô Back", callback_data='lang_en')
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="üíº **Projects**\n\n‚Ä¢ Premium Telegram Bots\n‚Ä¢ Full Stack Web Development\n‚Ä¢ API Integration & Automation",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

# Projects BN
async def projects_bn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data='lang_bn')
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="üíº **‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶∏‡¶Æ‡ßÇ‡¶π**\n\n‚Ä¢ ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü\n‚Ä¢ ‡¶´‡ßÅ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n‚Ä¢ ‡¶è‡¶™‡¶ø‡¶Ü‡¶á ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶ó‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ì ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶∂‡¶®",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

# Contact EN
async def contact_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardButton("üîô Back", callback_data='lang_en')
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="‚úâÔ∏è **Contact Info**\n\nEmail: swygenofficial@gmail.com\nTelegram: @swygenofficial",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

# Contact BN
async def contact_bn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data='lang_bn')
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption="‚úâÔ∏è **‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®**\n\n‡¶á‡¶Æ‡ßá‡¶á‡¶≤: swygenofficial@gmail.com\n‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ: @swygenofficial",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

def main():
    app = ApplicationBuilder().token('7870153726:AAHNAJWQpMhk2UXe1iXwWBiNC59ojAMnbO8').build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(lang_select, pattern='^lang_'))
    app.add_handler(CallbackQueryHandler(profile_en, pattern='^profile_en$'))
    app.add_handler(CallbackQueryHandler(profile_bn, pattern='^profile_bn$'))
    app.add_handler(CallbackQueryHandler(projects_en, pattern='^projects_en$'))
    app.add_handler(CallbackQueryHandler(projects_bn, pattern='^projects_bn$'))
    app.add_handler(CallbackQueryHandler(contact_en, pattern='^contact_en$'))
    app.add_handler(CallbackQueryHandler(contact_bn, pattern='^contact_bn$'))

    app.run_polling()

if __name__ == '__main__':
    main()
